<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CTF-逆向题-pyc思路</title>
      <link href="/2024/12/08/CTF-%E9%80%86%E5%90%91%E9%A2%98-pyc%E6%80%9D%E8%B7%AF/"/>
      <url>/2024/12/08/CTF-%E9%80%86%E5%90%91%E9%A2%98-pyc%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="1-什么是-pyc-文件"><a href="#1-什么是-pyc-文件" class="headerlink" title="1. 什么是 pyc 文件"></a><strong>1. 什么是 <code>pyc</code> 文件</strong></h3><ul><li>简要介绍：<ul><li><code>pyc</code> 是 Python 源代码（<code>.py</code>）文件被编译后的字节码文件，通常位于 <code>__pycache__</code> 文件夹中。</li></ul></li><li>在 CTF 中的常见考点：<ul><li>恶意字节码修改</li><li>防止直接反编译的干扰</li><li>反编译字节码</li><li>py代码逆向</li><li>隐藏的调试信息</li></ul></li></ul><hr><h3 id="2-pyc-文件结构与原理"><a href="#2-pyc-文件结构与原理" class="headerlink" title="2. pyc 文件结构与原理"></a><strong>2. pyc 文件结构与原理</strong></h3><ul><li><strong>2.1. 文件结构</strong><ul><li>文件头部：包含 Python 版本、时间戳等信息。  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Python3.3 以下版本文件头仅包含：</span><br><span class="line">Magic Number（4 字节，小端序）</span><br><span class="line">时间戳（4 字节，记录文件编译时间，POSIX 时间戳）</span><br><span class="line">Python3.3 到 Python3.7（不包含 3.7）文件头包含：</span><br><span class="line">    Magic Number（4 字节，小端序）</span><br><span class="line">    时间戳（8 字节，扩展为 64 位精度）</span><br><span class="line">    字节码大小（4 字节，用于校验文件完整性）</span><br><span class="line">Python3.7+,引入了字节码缓存目录的全新文件格式。后者对文件反编译没有影响，全部填充0即可</span><br><span class="line">    Magic Number（4 字节，小端序）</span><br><span class="line">    flags（4 字节，从 Python 3.7 开始引入，默认值为 0。）</span><br><span class="line">    文件哈希值（8 字节，取代时间戳和大小信息，用于更强的文件完整性校验）</span><br></pre></td></tr></table></figure></li><li>字节码内容：存储程序的操作指令。</li></ul></li><li><strong>2.2. 常见的工具</strong><ul><li><code>uncompyle6</code>：将 <code>.pyc</code> 文件还原为 <code>.py</code> 文件。<ul><li>安装方法 <code>pip install uncompyle</code></li></ul></li><li><code>pycdc</code> 和 <code>pycdas</code>：分别是反编译工具和动态分析工具。<ul><li><a href="/download/pycdc.exe">pycdc</a></li><li><a href="/download/pycdc.exe">pycdas</a></li></ul></li><li><code>pyinstxtractor.py</code>: 一个解包工具，用于解包由PyInstaller制作的.exe可执行文件的工具。</li><li><code>marshal</code> 模块：直接加载和读取 <code>.pyc</code> 文件。</li></ul></li></ul><hr><h3 id="3-pyc-逆向通用解题步骤"><a href="#3-pyc-逆向通用解题步骤" class="headerlink" title="3. pyc 逆向通用解题步骤"></a><strong>3. pyc 逆向通用解题步骤</strong></h3><h4 id="3-1-检查文件版本"><a href="#3-1-检查文件版本" class="headerlink" title="3.1. 检查文件版本"></a><strong>3.1. 检查文件版本</strong></h4><ul><li><p>使用<code>die.exe</code>或<code>exeinfo</code>等图形化工具来分析文件类型和版本。</p></li><li><p>使用 <code>file</code> 或 <code>binwalk</code> 命令分析文件头：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file example.pyc</span><br></pre></td></tr></table></figure></li><li><p>根据版本号选择合适的反编译工具。</p><ul><li>示例：<ul><li>Python 3.7：<code>uncompyle6</code></li><li>Python 3.9+：推荐 <code>pycdc</code></li></ul></li></ul></li></ul><h4 id="3-2-直接反编译"><a href="#3-2-直接反编译" class="headerlink" title="3.2. 直接反编译"></a><strong>3.2. 直接反编译</strong></h4><ul><li><p><strong>方法 1：使用 <code>uncompyle6</code></strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6 -o output_dir example.pyc</span><br></pre></td></tr></table></figure><ul><li>输出的 <code>.py</code> 文件可能已经可以直接使用。</li></ul></li><li><p><strong>方法 2：使用 <code>pycdc</code></strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pycdc example.pyc &gt; output.py</span><br></pre></td></tr></table></figure><ul><li>注意检查输出的逻辑是否完整，有时需要补充变量名或注释。</li></ul></li></ul><h4 id="3-3-无法直接反编译的情况"><a href="#3-3-无法直接反编译的情况" class="headerlink" title="3.3. 无法直接反编译的情况"></a><strong>3.3. 无法直接反编译的情况</strong></h4><ul><li><p><strong>情况 1：魔改字节码</strong></p><ul><li><p>使用 <code>marshal</code> 解析原始数据：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;example.pyc&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.read(<span class="number">16</span>)  <span class="comment"># 跳过头部</span></span><br><span class="line">    code_obj = marshal.load(f)</span><br><span class="line">    <span class="built_in">print</span>(code_obj)</span><br></pre></td></tr></table></figure></li><li><p>手动解析字节码以发现关键逻辑。</p></li></ul></li><li><p><strong>情况 2：动态加密</strong></p><ul><li>结合 <code>pycdas</code> 动态分析：<ul><li><p>在执行时注入调试钩子或打印关键变量。</p></li><li><p>示例代码：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line">dis.dis(code_obj)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="3-4-修改后重新运行"><a href="#3-4-修改后重新运行" class="headerlink" title="3.4. 修改后重新运行"></a><strong>3.4. 修改后重新运行</strong></h4><ul><li><p>若需要动态修改字节码逻辑，可以直接将字节码导出为 <code>.py</code> 文件后重新生成 <code>.pyc</code> 文件：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m py_compile modified.py</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-5-exe-解包为pyc"><a href="#3-5-exe-解包为pyc" class="headerlink" title="3.5.exe 解包为pyc"></a><strong>3.5.<code>exe</code> 解包</strong>为<code>pyc</code></h4><ul><li>使用<code>pyinstxtractor.py</code>把<code>exe</code>变成结构体和一个文件<br>  使用方法：*<code>python .\pyinstxtractor.py .\attachment.exe</code> </li><li><strong>重点：再把时间属性和版本的魔术字放回去保存</strong><ul><li>python文件打包成exe文件的过程中，会抹去pyc文件前面的部分信息，所以在反编译之前需要检查并添加上这部分信息，这部分信息可以通过struct文件获取。**</li></ul><ul><li>使用010editor中打开struct文件后，把struct文件前几个字节插入<code>pyc源码文件</code>开头。（具体要插入几个字节还是要看解包后的文件，根据python版本。）</li></ul></li><li>pyc 反编译</li></ul><h4 id="3-6-修复pyc"><a href="#3-6-修复pyc" class="headerlink" title="3.6.修复pyc"></a><strong>3.6.修复pyc</strong></h4><p><em>Magic Number 已知列表，在文末附上</em></p><p>接下来就算找到了<code>Magic Number</code>的版本对照表。但是，我们知道的<code>Magic Number</code>是四字节二进制数据。<br>转换代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MAGIC_NUMBER = (<span class="number">3413</span>).to_bytes(<span class="number">2</span>, <span class="string">&#x27;little&#x27;</span>) + <span class="string">b&#x27;\r\n&#x27;</span>  </span><br><span class="line">_RAW_MAGIC_NUMBER = <span class="built_in">int</span>.from_bytes(MAGIC_NUMBER, <span class="string">&#x27;little&#x27;</span>)  </span><br><span class="line">HEX_MAGIC_NUMBER = <span class="built_in">hex</span>(_RAW_MAGIC_NUMBER)  </span><br><span class="line"><span class="built_in">print</span>(HEX_MAGIC_NUMBER)  </span><br><span class="line"><span class="built_in">print</span>(HEX_MAGIC_NUMBER.upper()[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>这里的<code>3413</code>就是<code>Python 3.8b4</code>版本的<code>Magic Number</code>，执行一下，就得到了四字节的二进制码<code>0x0A0D0D55</code>。其他版本的对应二进制码，可以按照上面步骤计算得到。</p><hr><h3 id="4-题目示例"><a href="#4-题目示例" class="headerlink" title="4. 题目示例"></a><strong>4. 题目示例</strong></h3><hr><h3 id="5-常见问题与解答"><a href="#5-常见问题与解答" class="headerlink" title="5. 常见问题与解答"></a><strong>5. 常见问题与解答</strong></h3><ul><li><strong>Q1：为什么 <code>uncompyle6</code> 提示版本不支持？</strong><ul><li>检查文件是否属于较新版本 Python，可能需要切换工具（如 <code>pycdc</code>）。</li></ul></li><li><strong>Q2：如何定位反编译后的逻辑错误？</strong><ul><li>通过插入打印调试语句，逐步分析代码的运行轨迹。</li></ul></li><li><strong>Q3：遇到pycdc和uncompyle6都无法反编译的情况怎么办</strong><ul><li><del>直接摆烂</del> ,可以尝试使用pycdas来转成字节码，根据字节码自行反编译，实在看不懂字节码，大不了直接丢给AI呗。</li></ul></li></ul><hr><h3 id="6-总结与建议"><a href="#6-总结与建议" class="headerlink" title="6. 总结与建议"></a><strong>6. 总结与建议</strong></h3><ul><li>熟悉 <code>.pyc</code> 文件的基本结构有助于快速解题。</li><li>工具选择是关键：尽量掌握多种工具的用法。</li><li>遇到干扰时，不妨尝试动态分析和字节码级别解析。</li></ul><hr><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="Magic-Number-对照表"><a href="#Magic-Number-对照表" class="headerlink" title="Magic Number 对照表"></a><strong>Magic Number 对照表</strong></h4><ul><li>如果需要更详细的版本历史，可参考 Python 源码中的 <code>Lib/importlib/_bootstrap_external.py</code> 文件。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">Known values:</span><br><span class="line">#  Python 1.5:   20121</span><br><span class="line">#  Python 1.5.1: 20121</span><br><span class="line">#     Python 1.5.2: 20121</span><br><span class="line">#     Python 1.6:   50428</span><br><span class="line">#     Python 2.0:   50823</span><br><span class="line">#     Python 2.0.1: 50823</span><br><span class="line">#     Python 2.1:   60202</span><br><span class="line">#     Python 2.1.1: 60202</span><br><span class="line">#     Python 2.1.2: 60202</span><br><span class="line">#     Python 2.2:   60717</span><br><span class="line">#     Python 2.3a0: 62011</span><br><span class="line">#     Python 2.3a0: 62021</span><br><span class="line">#     Python 2.3a0: 62011 (!)</span><br><span class="line">#     Python 2.4a0: 62041</span><br><span class="line">#     Python 2.4a3: 62051</span><br><span class="line">#     Python 2.4b1: 62061</span><br><span class="line">#     Python 2.5a0: 62071</span><br><span class="line">#     Python 2.5a0: 62081 (ast-branch)</span><br><span class="line">#     Python 2.5a0: 62091 (with)</span><br><span class="line">#     Python 2.5a0: 62092 (changed WITH_CLEANUP opcode)</span><br><span class="line">#     Python 2.5b3: 62101 (fix wrong code: for x, in ...)</span><br><span class="line">#     Python 2.5b3: 62111 (fix wrong code: x += yield)</span><br><span class="line">#     Python 2.5c1: 62121 (fix wrong lnotab with for loops and</span><br><span class="line">#                          storing constants that should have been removed)</span><br><span class="line">#     Python 2.5c2: 62131 (fix wrong code: for x, in ... in listcomp/genexp)</span><br><span class="line">#     Python 2.6a0: 62151 (peephole optimizations and STORE_MAP opcode)</span><br><span class="line">#     Python 2.6a1: 62161 (WITH_CLEANUP optimization)</span><br><span class="line">#     Python 2.7a0: 62171 (optimize list comprehensions/change LIST_APPEND)</span><br><span class="line">#     Python 2.7a0: 62181 (optimize conditional branches:</span><br><span class="line">#                          introduce POP_JUMP_IF_FALSE and POP_JUMP_IF_TRUE)</span><br><span class="line">#     Python 2.7a0  62191 (introduce SETUP_WITH)</span><br><span class="line">#     Python 2.7a0  62201 (introduce BUILD_SET)</span><br><span class="line">#     Python 2.7a0  62211 (introduce MAP_ADD and SET_ADD)</span><br><span class="line">#     Python 3000:   3000</span><br><span class="line">#                    3010 (removed UNARY_CONVERT)</span><br><span class="line">#                    3020 (added BUILD_SET)</span><br><span class="line">#                    3030 (added keyword-only parameters)</span><br><span class="line">#                    3040 (added signature annotations)</span><br><span class="line">#                    3050 (print becomes a function)</span><br><span class="line">#                    3060 (PEP 3115 metaclass syntax)</span><br><span class="line">#                    3061 (string literals become unicode)</span><br><span class="line">#                    3071 (PEP 3109 raise changes)</span><br><span class="line">#                    3081 (PEP 3137 make __file__ and __name__ unicode)</span><br><span class="line">#                    3091 (kill str8 interning)</span><br><span class="line">#                    3101 (merge from 2.6a0, see 62151)</span><br><span class="line">#                    3103 (__file__ points to source file)</span><br><span class="line">#     Python 3.0a4: 3111 (WITH_CLEANUP optimization).</span><br><span class="line">#     Python 3.0b1: 3131 (lexical exception stacking, including POP_EXCEPT</span><br><span class="line">                          #3021)</span><br><span class="line">#     Python 3.1a1: 3141 (optimize list, set and dict comprehensions:</span><br><span class="line">#                         change LIST_APPEND and SET_ADD, add MAP_ADD #2183)</span><br><span class="line">#     Python 3.1a1: 3151 (optimize conditional branches:</span><br><span class="line">#                         introduce POP_JUMP_IF_FALSE and POP_JUMP_IF_TRUE</span><br><span class="line">                          #4715)</span><br><span class="line">#     Python 3.2a1: 3160 (add SETUP_WITH #6101)</span><br><span class="line">#                   tag: cpython-32</span><br><span class="line">#     Python 3.2a2: 3170 (add DUP_TOP_TWO, remove DUP_TOPX and ROT_FOUR #9225)</span><br><span class="line">#                   tag: cpython-32</span><br><span class="line">#     Python 3.2a3  3180 (add DELETE_DEREF #4617)</span><br><span class="line">#     Python 3.3a1  3190 (__class__ super closure changed)</span><br><span class="line">#     Python 3.3a1  3200 (PEP 3155 __qualname__ added #13448)</span><br><span class="line">#     Python 3.3a1  3210 (added size modulo 2**32 to the pyc header #13645)</span><br><span class="line">#     Python 3.3a2  3220 (changed PEP 380 implementation #14230)</span><br><span class="line">#     Python 3.3a4  3230 (revert changes to implicit __class__ closure #14857)</span><br><span class="line">#     Python 3.4a1  3250 (evaluate positional default arguments before</span><br><span class="line">#                        keyword-only defaults #16967)</span><br><span class="line">#     Python 3.4a1  3260 (add LOAD_CLASSDEREF; allow locals of class to override</span><br><span class="line">#                        free vars #17853)</span><br><span class="line">#     Python 3.4a1  3270 (various tweaks to the __class__ closure #12370)</span><br><span class="line">#     Python 3.4a1  3280 (remove implicit class argument)</span><br><span class="line">#     Python 3.4a4  3290 (changes to __qualname__ computation #19301)</span><br><span class="line">#     Python 3.4a4  3300 (more changes to __qualname__ computation #19301)</span><br><span class="line">#     Python 3.4rc2 3310 (alter __qualname__ computation #20625)</span><br><span class="line">#     Python 3.5a1  3320 (PEP 465: Matrix multiplication operator #21176)</span><br><span class="line">#     Python 3.5b1  3330 (PEP 448: Additional Unpacking Generalizations #2292)</span><br><span class="line">#     Python 3.5b2  3340 (fix dictionary display evaluation order #11205)</span><br><span class="line">#     Python 3.5b3  3350 (add GET_YIELD_FROM_ITER opcode #24400)</span><br><span class="line">#     Python 3.5.2  3351 (fix BUILD_MAP_UNPACK_WITH_CALL opcode #27286)</span><br><span class="line">#     Python 3.6a0  3360 (add FORMAT_VALUE opcode #25483)</span><br><span class="line">#     Python 3.6a1  3361 (lineno delta of code.co_lnotab becomes signed #26107)</span><br><span class="line">#     Python 3.6a2  3370 (16 bit wordcode #26647)</span><br><span class="line">#     Python 3.6a2  3371 (add BUILD_CONST_KEY_MAP opcode #27140)</span><br><span class="line">#     Python 3.6a2  3372 (MAKE_FUNCTION simplification, remove MAKE_CLOSURE</span><br><span class="line">#                         #27095)</span><br><span class="line">#     Python 3.6b1  3373 (add BUILD_STRING opcode #27078)</span><br><span class="line">#     Python 3.6b1  3375 (add SETUP_ANNOTATIONS and STORE_ANNOTATION opcodes</span><br><span class="line">#                         #27985)</span><br><span class="line">#     Python 3.6b1  3376 (simplify CALL_FUNCTIONs &amp; BUILD_MAP_UNPACK_WITH_CALL</span><br><span class="line">                          #27213)</span><br><span class="line">#     Python 3.6b1  3377 (set __class__ cell from type.__new__ #23722)</span><br><span class="line">#     Python 3.6b2  3378 (add BUILD_TUPLE_UNPACK_WITH_CALL #28257)</span><br><span class="line">#     Python 3.6rc1 3379 (more thorough __class__ validation #23722)</span><br><span class="line">#     Python 3.7a1  3390 (add LOAD_METHOD and CALL_METHOD opcodes #26110)</span><br><span class="line">#     Python 3.7a2  3391 (update GET_AITER #31709)</span><br><span class="line">#     Python 3.7a4  3392 (PEP 552: Deterministic pycs #31650)</span><br><span class="line">#     Python 3.7b1  3393 (remove STORE_ANNOTATION opcode #32550)</span><br><span class="line">#     Python 3.7b5  3394 (restored docstring as the first stmt in the body;</span><br><span class="line">#                         this might affected the first line number #32911)</span><br><span class="line">#     Python 3.8a1  3400 (move frame block handling to compiler #17611)</span><br><span class="line">#     Python 3.8a1  3401 (add END_ASYNC_FOR #33041)</span><br><span class="line">#     Python 3.8a1  3410 (PEP570 Python Positional-Only Parameters #36540)</span><br><span class="line">#     Python 3.8b2  3411 (Reverse evaluation order of key: value in dict</span><br><span class="line">#                         comprehensions #35224)</span><br><span class="line">#     Python 3.8b2  3412 (Swap the position of positional args and positional</span><br><span class="line">#                         only args in ast.arguments #37593)</span><br><span class="line">#     Python 3.8b4  3413 (Fix &quot;break&quot; and &quot;continue&quot; in &quot;finally&quot; #37830)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试笔记思路</title>
      <link href="/2024/11/29/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0%E6%80%9D%E8%B7%AF/"/>
      <url>/2024/11/29/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">渗透：Web应用网站</span><br><span class="line">测试账号：wdc/wdc123</span><br><span class="line">1、信息收集：</span><br><span class="line">--目录扫描：dirsearch、御剑、dirb……</span><br><span class="line">--python3.10安装，并配置环境变量</span><br><span class="line">---在dirsearch解压目录下打开CMD</span><br><span class="line">---dirsearch：python dirsearch.py -u http://ip:port/</span><br><span class="line">--AWVS去扫描</span><br><span class="line">--Server: Apache/2.2.22 (Ubuntu)</span><br><span class="line">---/etc/passwd</span><br><span class="line">2、分析网站功能：</span><br><span class="line">前台：</span><br><span class="line">A、登录</span><br><span class="line">-登录：万能密码登录(高危)</span><br><span class="line">-admin&#x27; or 1 #</span><br><span class="line">-密码随意输入</span><br><span class="line">-忘记密码</span><br><span class="line">-重置密码步骤跳跃(高危)</span><br><span class="line">-用户密保问题(中危)</span><br><span class="line">-注册</span><br><span class="line">-任意用户注册(中危)</span><br><span class="line">-缺少密码复杂度校验(中危)</span><br><span class="line">B、公告：SQL注入(高危)</span><br><span class="line">-用户远程传入的ID(GET/POST)</span><br><span class="line">-公告/新闻类的：SQL注入漏洞、XSS</span><br><span class="line">--SQL注入常见位置：</span><br><span class="line">-公告、查询、登录、注册、文章……</span><br><span class="line">-http 头部注入：</span><br><span class="line">--cookie</span><br><span class="line">--user-agent</span><br><span class="line">--SQL注入判断：手工判断、Sqlmap</span><br><span class="line">--1、查询类型判断：字符型、数字型</span><br><span class="line">---news.php?newsid=11-1</span><br><span class="line">---news.php?newsid=11</span><br><span class="line">---查询结果不同，数字型的注入</span><br><span class="line">--2、注入点判断：</span><br><span class="line">---news.php?newsid=11 and 1=2</span><br><span class="line">---news.php?newsid=11 and 1=1</span><br><span class="line">--漏洞利用：</span><br><span class="line">---方式：联合查询、报错注入、时间盲注、布尔盲注</span><br><span class="line">----联合查询：</span><br><span class="line">关键字：union</span><br><span class="line">-news.php?newsid=0 union select 1,2</span><br><span class="line">-news.php?newsid=0 union select database(),version()</span><br><span class="line">-order by：排序，以指定的列进行排序。二分法</span><br><span class="line">---sqlmap：</span><br><span class="line">C、留言板：存储型XSS(中危)</span><br><span class="line">功能：用户输入、用户输出(XSS: 跨站脚本攻击)</span><br><span class="line">1、危害：重定向指定网页</span><br><span class="line">2、劫持：Cookie、网页内容、提交数据</span><br><span class="line">测试语句：</span><br><span class="line">-&lt;script&gt;alert(1)&lt;/script&gt;</span><br><span class="line">XSS漏洞类型：反射型XSS(DOM型XSS)、存储型XSS</span><br><span class="line">D、系统简介：文件包含/读取(高危)</span><br><span class="line">page，包含到介绍.txt文件：文件包含、文件读取</span><br><span class="line">操作：修改目标文件</span><br><span class="line">-测试：包含php文件，是否能获取目标文件内容</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">后台：</span><br><span class="line">1、修改密码: CSRF(高危)</span><br><span class="line">-缺少二次校验</span><br><span class="line">--验证码/当前密码的校验</span><br><span class="line">-CSRF：跨站请求伪造</span><br><span class="line">-1、攻击者先获取当前某个功能正常的数据提交字段</span><br><span class="line">-2、搭建网站(公网服务器)，其中保存csrf的代码数据</span><br><span class="line">-3、让网站的正常用户访问csrf的代码页面并点击提交</span><br><span class="line">2、查看成绩：水平越权(中危)、SQL注入漏洞(高危)</span><br><span class="line">-水平越权</span><br><span class="line">--普通用户1 --&gt; 普通用户2</span><br><span class="line">-垂直越权</span><br><span class="line">--普通用户---&gt;管理员</span><br><span class="line">3、缴费</span><br><span class="line">-重放攻击/福利重复领取(高危)</span><br><span class="line">-交易金额篡改: 负数、小数(高危)</span><br><span class="line">4、转账</span><br><span class="line">-交易金额篡改：负数(高危)</span><br><span class="line">-交易目标篡改(高危)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、扫描信息分析：</span><br><span class="line">A、test.php：信息泄露(中危)</span><br><span class="line">B、download.php(猜: 参数)(高危)：</span><br><span class="line">-文件相关，操作目标文件名：file、filename、page、test、target、fiiles……</span><br><span class="line">-?file=/etc/passwd</span><br><span class="line">-?file=download.php</span><br><span class="line">C、setup：高危</span><br><span class="line">--初始化安装文件未删除</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/11/25/hello-world/"/>
      <url>/2024/11/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2024/07/05/%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/07/05/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="知识领域"><a href="#知识领域" class="headerlink" title="知识领域"></a>知识领域</h3><blockquote><p>#UPX脱壳魔改</p><p>#base64换表</p></blockquote><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>该程序为魔改的UPX壳,把ABC改为UPX</p><p><img src="/../images/%E6%B5%8B%E8%AF%95/IMG-20241127130301548.png"></p><p>通过修改关键字即可正常脱壳，发现是换表的base64正常解密即可</p><p><img src="/../images/%E6%B5%8B%E8%AF%95/IMG-20241203104548733.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
